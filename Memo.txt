function App() {
  const [fetchError, setFetchError] = useState<string | null>(null);

  const [followers, setFollowers] = useState<Followers[] | null>(null);
  const [users, setUsers] = useState<Users[] | null>(null);
  const [comments, setComments] = useState<Comments[] | null>(null);
  const [days, setDays] = useState<Days[] | null>(null);
  const [likes, setLikes] = useState<Likes[] | null>(null);
  const [tasks, setTasks] = useState<Tasks[] | null>(null);

  useEffect(() => {
    const fetchFollowers = async () => {
      let { data: followers, error } = await supabase
        .from("followers")
        .select("*");
      // console.log(followers);

      if (error) {
        setFetchError("데이터 불러오기 실패");
        setFollowers(null);
        console.log(error);
      }

      if (followers) {
        setFollowers(followers);
        setFetchError(null);
      }
    };

    fetchFollowers();
  }, []);

  useEffect(() => {
    const fetchUsers = async () => {
      let { data: users, error } = await supabase.from("users").select("*");
      // console.log(users);

      if (error) {
        setFetchError("데이터 불러오기 실패");
        setUsers(null);
        console.log(error);
      }

      if (users) {
        setUsers(users);
        setFetchError(null);
      }
    };

    fetchUsers();
  }, []);

  useEffect(() => {
    const fetchComments = async () => {
      let { data: comments, error } = await supabase
        .from("comments")
        .select("*");
      console.log(comments);

      if (error) {
        setFetchError("데이터 불러오기 실패");
        setComments(null);
        console.log(error);
      }

      if (comments) {
        setComments(comments);
        setFetchError(null);
      }
    };
    fetchComments();
  }, []);

  useEffect(() => {
    const fetchDays = async () => {
      let { data: days, error } = await supabase.from("days").select("*");
      console.log(days); // ??
      if (error) {
        setFetchError("데이터 불러오기 실패");
        setDays(null);
        console.log(error);
      }

      if (days) {
        setDays(days);
        setFetchError(null);
      }
    };
    fetchDays();
  }, []);

  useEffect(() => {
    const fetchLikes = async () => {
      let { data: likes, error } = await supabase.from("likes").select("*");
      console.log(likes);

      if (error) {
        setFetchError("데이터 불러오기 실패");
        setLikes(null);
        console.log(error);
      }

      if (likes) {
        setLikes(likes);
        setFetchError(null);
      }
    };

    fetchLikes();
  }, []);

  useEffect(() => {
    const fetchTasks = async () => {
      let { data: tasks, error } = await supabase.from("tasks").select("*");
      console.log(tasks);

      if (error) {
        setFetchError("데이터 불러오기 실패");
        setTasks(null);
        console.log(error);
      }

      if (tasks) {
        setTasks(tasks);
        setFetchError(null);
      }
    };

    fetchTasks();
  }, []);

  return (
    <>
      <div>
        {fetchError && <p>{fetchError}</p>}
        {followers?.map((follower) => (
          <div key={follower.follow_id}>
            <p>{follower.from}</p>
            <p>{follower.to}</p>
          </div>
        ))}
      </div>
    </>
  );
}

//
//
  const localData: EventSettingsModel = {
    dataSource: [
      {
        Id: 1,
        End: new Date(2019, 0, 11, 6, 30),
        Start: new Date(2019, 0, 11, 4, 0),
        Summary: "",
        IsAllDay: true,
        RecurrenceRule: "FREQ=DAILY; INTERVAL=1; COUNT=5", // issue
        IsBlock: true,
        IsReadonly: true,
      },
      {
        Id: 2,
        End: new Date(2019, 0, 21, 8, 30),
        Start: new Date(2019, 0, 21, 7, 0),
        Summary: "Meeting",
        IsAllDay: true,
      },
    ],
    fields: {
      subject: { name: "Summary", default: "내용을 입력해주세요." },
      startTime: { name: "Start" },
      endTime: { name: "End" },
    },
  };
  //
  const remoteData = new DataManager({
    url: "https://js.syncfusion.com/demos/ejservices/api/Schedule/LoadData",
    adaptor: new WebApiAdaptor(),
    crossDomain: true,
  });

   {/* -------------------------default view: Day------------------------------- */}
        {/* <ScheduleComponent currentView="Day" eventSettings={localData}>
          <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />
        </ScheduleComponent> */}
        {/* -------------------------default view: Month------------------------------- */}
        {/* <ScheduleComponent
          currentView="Month"
          selectedDate={new Date(2019, 0, 11)} // 서비스 출시일인 2017.6월부터 약속잡기 기능 가능
          eventSettings={localData}
        >
          <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />
        </ScheduleComponent> */}
        {/* -------------------------default view: Week------------------------------- */}
        <ScheduleComponent
          height="550px"
          currentView="Week"
          selectedDate={new Date(2017, 5, 5)}
          eventSettings={{ dataSource: remoteData }}
        >
          <ViewsDirective>
            <ViewDirective option="Day"></ViewDirective>
            <ViewDirective option="Week"></ViewDirective>
            <ViewDirective option="WorkWeek"></ViewDirective>
            <ViewDirective option="Month"></ViewDirective>
            <ViewDirective option="Agenda"></ViewDirective>
            <ViewDirective
              option="TimelineDay"
              isSelected={true}
              displayName="오늘의 타임라인"
            ></ViewDirective>
            <ViewDirective option="TimelineMonth"></ViewDirective>
          </ViewsDirective>
          <Inject
            services={[
              Day,
              Week,
              WorkWeek,
              Month,
              Agenda,
              TimelineViews,
              TimelineMonth,
            ]}
          />
        </ScheduleComponent>

        <link
      href="https://cdn.syncfusion.com/ej2/material.css"
      rel="stylesheet"
      type="text/css"
    />